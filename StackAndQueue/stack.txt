https://www.geeksforgeeks.org/stack-in-python/
a) Basic Operations on Stack:
1.push() to insert an element into the stack
2.pop() to remove an element from the stack
3.top() Returns the top element of the stack.
4.isEmpty() returns true if stack is empty else false.
5.size() returns the size of stack.

b) Push:
Adds an item to the stack. If the stack is full, then it is said to be an Overflow condition.

Algorithm for push:

begin
 if stack is full
    return
 endif
else
 increment top
 stack[top] assign value
end else
end procedure

c) Pop:
Removes an item from the stack. The items are popped in the reversed order in which they are pushed. If the stack is empty, then it is said to be an Underflow condition.

Algorithm for pop:

begin
 if stack is empty
    return
 endif
else
 store value of stack[top]
 decrement top
 return value
end else
end procedure

d) Top:
Returns the top element of the stack.

Algorithm for Top:

begin
  return stack[top]
end procedure

e) isEmpty:
Returns true if the stack is empty, else false.

Algorithm for isEmpty:

begin
 if top < 1
    return true
 else
    return false
end procedure

f) Complexity Analysis:
Time Complexity
Operations  	Complexity
push() 	            O(1)
pop()   	        O(1)
isEmpty() 	        O(1)
size()	            O(1)

g) Types of Stacks:
Register Stack: This type of stack is also a memory element present in the memory unit and can handle a small amount of data only. The height of the register stack is always limited as the size of the register stack is very small compared to the memory.
Memory Stack: This type of stack can handle a large amount of memory data. The height of the memory stack is flexible as it occupies a large amount of memory data.
h) Applications of the stack:
Infix to Postfix /Prefix conversion
Redo-undo features at many places like editors, photoshop.
Forward and backward features in web browsers
Used in many algorithms like Tower of Hanoi, tree traversals, stock span problems, and histogram problems.
Backtracking is one of the algorithm designing techniques. Some examples of backtracking are the Knight-Tour problem, N-Queen problem, find your way through a maze, and game-like chess or checkers in all these problems we dive into someway if that way is not efficient we come back to the previous state and go into some another path. To get back from a current state we need to store the previous state for that purpose we need a stack.
In Graph Algorithms like Topological Sorting and Strongly Connected Components
In Memory management, any modern computer uses a stack as the primary management for a running purpose. Each program that is running in a computer system has its own memory allocations
String reversal is also another application of stack. Here one by one each character gets inserted into the stack. So the first character of the string is on the bottom of the stack and the last element of a string is on the top of the stack. After Performing the pop operations on the stack we get a string in reverse order.
Stack also helps in implementing function call in computers. The last called function is always completed first.
Stacks are also used to implement the undo/redo operation in text editor.
i) Implementation of Stack:
There are two ways to implement a stack

Using array
Using linked list

